# MODEL hparams
[model.complexity]
suggest = "categorical"
choices = ["small", "medium", "large", "xl", "xxl"]

[model.complexity.map]
small = { num_heads = 4, n_enc_layers = 5 }
medium = { num_heads = 8, n_enc_layers = 10 }
large = { num_heads = 16, n_enc_layers = 15 }
xl = { num_heads = 32, n_enc_layers = 20 }
xxl = { num_heads = 32, n_enc_layers = 30 }

[model.multiplier]
suggest = "float"
low = 0.5
high = 10.0
log = true

[model.dropout]
suggest = "float"
low = 0.0
high = 0.5
log = false

# OPTIMIZER hparams
[optim.lr]
suggest = "float"
low = 1e-3
high = 1e-1
log = true

[optim.weight_decay]
suggest = "float"
low = 1e-3
high = 1e-1
log = true

# DATA hparams
[data.batch_size]
suggest = "categorical"
choices = [16, 32, 64]

[data.chunk_size]
suggest = "int"
low = 15
high = 50
step = 5

# LOSS hparams
[loss.margin]
suggest = "float"
low = 0.1
high = 10.0
log = true

# EXPERIMENT hparams
[experiment.swa_epoch_start]
suggest = "float"
low = 0.5
high = 0.8
log = false

[experiment.annealing_epochs]
suggest = "int"
low = 10
high = 100
step = 1

[experiment.annealing_strategy]
suggest = "categorical"
choices = ["linear", "cosine"]

# AUGMENTATION hparams
[augmentation.sample_scale]
suggest = "float"
low = 1.0
high = 15.0
log = false

[augmentation.sample_rate]
suggest = "float"
low = 0.25
high = 0.75
log = false
